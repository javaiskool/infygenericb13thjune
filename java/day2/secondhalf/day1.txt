input - process - output

programming language

1. sequential execution
2. selection
3. iteration

program
set of instructions to perform particular task
written in structured english with syntax

source code - program.java
compilation - byte code machine independent
interpretation - executable code machine dependent

java - byte code - machine code

JDK JRE JVM - JIT
block
{


}

class Welcome
{
	public static void main(String args[])
	{
		System.out.println("Hello!");
	}
}


https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.msi

https://www.eclipse.org/downloads/


keywords - reserved words in a particular programming language
class if try package do 

variables - name of memory location, hold some value, changable at execution

variables are to be initialized before use

declare initiallize use

sname age num1  x 

identifiers - names given to class, method, variable for unique identification

classname starts with capital letter
a-z, A-Z, 0-9, _ $
should not start with digit
should not be java keyword
case sensitive
no length restriction 

8-15
useful and meaningful
studentName - camel case 
studentProjectName 
studentname


data types 
primitive  boolean, char, numeric


variable declaration
data-type variable-name;
data-type variable-name=value;
data-type variable1, variable2=value, variable3;


non-primitive
Sting


operators

binary - 2 operands 
operand1 operator operand2
x          +        10

arithmetic - numbers   answer numeric
addition +   x+10
subtraction -     7-2
multiplication *    x * y
division /   10/2  => 5
remainder %  10%2  => 0   9%2 => 1

relational/ comparison operators  answer is boolean 
>   6>5  => true
>=   (x+y)>=8
<    9<12    true
<=   10<=10  true
==   x==4
!=    6!=7  true

logical work on    conditions

and   &&   cond1  && cond2  
if first condition evaluates to true  only then second condition is checked

true && true => true
true && false => false
false && true => flase
false && false => false


or    ||  cond1 || cond2
if first condition evaluates to false only then second condition is checked

true || true => true
true || false => true
false || true => true
flase || false => false

not   !  (unary)  
!(cond)

!(true) => flase
!(false) => true

assignment operators
=    var on lhs = value on rhs
shorthand assignment operators var lhs = value on rhs
+=   x+=y;  => x=x+y;
-=  a-=2;  => a=a-2;
*=  y*=10 => y=y*10;
/= b/=2;  => b=b/2;
%= r%=3; => r=r%3;


ternary iff 

condition?<value if true>:<value if flase>;
int r=(x>y)?x:y;
if (x>y) is true then r=x; otherwise r=y;

unary - 1 operand
operand operator
operator operand


increment x++  post fix => x is used first then incremented
++x pre fix => x is incremented first then used

decrement y-- post fix => y is used first then decremented
--y pre fix => y is decremented first then used

int x=2; y=x++; => y=2 x=3
int x=2; y=++x; => y=3 x=3

bitwise 

int x=350;
int x=0350; octal

Type conversion & type casting
compatible datatypes
smaller to bigger size implicit 
bigger to smaller size explcit , it may lead to overflow


